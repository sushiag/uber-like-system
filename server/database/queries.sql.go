// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const createDriver = `-- name: CreateDriver :one
INSERT INTO drivers(username) VALUES ($1)
RETURNING id, username, password, api_key, status, created_at
`

func (q *Queries) CreateDriver(ctx context.Context, username string) (Driver, error) {
	row := q.db.QueryRowContext(ctx, createDriver, username)
	var i Driver
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.ApiKey,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const createRide = `-- name: CreateRide :one
INSERT INTO rides(rider_id, driver_id, pickup_lat, pickup_long, dropoff_lat, dropoff_long)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, rider_id, driver_id, status, pickup_lat, pickup_long, dropoff_lat, dropoff_long, created_at
`

type CreateRideParams struct {
	RiderID     int64         `json:"rider_id"`
	DriverID    sql.NullInt64 `json:"driver_id"`
	PickupLat   float64       `json:"pickup_lat"`
	PickupLong  float64       `json:"pickup_long"`
	DropoffLat  float64       `json:"dropoff_lat"`
	DropoffLong float64       `json:"dropoff_long"`
}

func (q *Queries) CreateRide(ctx context.Context, arg CreateRideParams) (Ride, error) {
	row := q.db.QueryRowContext(ctx, createRide,
		arg.RiderID,
		arg.DriverID,
		arg.PickupLat,
		arg.PickupLong,
		arg.DropoffLat,
		arg.DropoffLong,
	)
	var i Ride
	err := row.Scan(
		&i.ID,
		&i.RiderID,
		&i.DriverID,
		&i.Status,
		&i.PickupLat,
		&i.PickupLong,
		&i.DropoffLat,
		&i.DropoffLong,
		&i.CreatedAt,
	)
	return i, err
}

const createRider = `-- name: CreateRider :one
INSERT INTO riders(username) VALUES ($1)
RETURNING id, username, password, api_key, created_at
`

func (q *Queries) CreateRider(ctx context.Context, username string) (Rider, error) {
	row := q.db.QueryRowContext(ctx, createRider, username)
	var i Rider
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.ApiKey,
		&i.CreatedAt,
	)
	return i, err
}

const getRideStatus = `-- name: GetRideStatus :one
SELECT status FROM rides WHERE id = $1
`

func (q *Queries) GetRideStatus(ctx context.Context, id int64) (sql.NullInt16, error) {
	row := q.db.QueryRowContext(ctx, getRideStatus, id)
	var status sql.NullInt16
	err := row.Scan(&status)
	return status, err
}
